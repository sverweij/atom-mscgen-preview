scopeName: "source.xu"
name: "XÃ¹"
foldingStartMarker: "{s*$"
foldingStopMarker: "^s*}"
fileTypes: [
  "xu"
]
patterns: [
  {
    comment: "msc program"
    begin: "\\b(msc|xu)\\b(\\s*)({)"
    beginCaptures:
      "0":
        name: "storage.type.xu"
      "3":
        name: "punctuation.definition.program.end.xu"
    end: "}"
    endCaptures:
      "0":
        name: "punctuation.definition.program.end.xu"
    patterns: [
      {
        include: "#option"
      }
      {
        include: "#punctuation"
      }
      {
        include: "#comment"
      }
      {
        include: "#attributelist"
      }
      {
        include: "#arctype"
      }
      {
        include: "#inlineblock"
      }
      {
        include: "#identifier"
      }
      {
        include: "#illegalalien"
      }
    ]
  }
  {
    include: "#comment"
  }
  {
    include: "#illegalalien"
  }
]
repository:
  punctuation:
    match: "(,|;)"
    name: "punctuation.separator.xu"
  illegalalien:
    comment: "include as last pattern to declare everything different from spaces illegal"
    match: "\\S"
    name: "invalid.illegal.xu"
  number:
    comment: "handles integer and decimal numbers"
    match: "-?(?=[1-9]|0(?!\\d))\\d+(\\.\\d+)?([eE][+-]?\\d+)?"
    name: "constant.numeric.xu"
  commentBlock:
    comment: "e.g. /* yadda */"
    begin: "/\\*"
    captures:
      "0":
        name: "punctuation.definition.comment.xu"
    end: "\\*/"
    name: "comment.block.xu"
  commentLineSlash:
    comment: "e.g. // yadda"
    begin: "(^[ \\t]+)?(?=//)"
    beginCaptures:
      "1":
        name: "punctuation.whitespace.comment.leading.xu"
    end: "(?!\\G)"
    patterns: [
      {
        begin: "//"
        beginCaptures:
          "0":
            name: "punctuation.definition.comment.xu"
        end: "\\n"
        name: "comment.line.double-slash.xu"
      }
    ]
  commentLineHash:
    comment: "e.g. # yadda"
    begin: "(^[ \\t]+)?(?=#)"
    beginCaptures:
      "1":
        name: "punctuation.whitespace.comment.leading.xu"
    end: "(?!\\G)"
    patterns: [
      {
        begin: "#"
        beginCaptures:
          "0":
            name: "punctuation.definition.comment.xu"
        end: "\\n"
        name: "comment.line.number-sign.xu"
      }
    ]
  comment:
    patterns: [
      {
        include: "#commentBlock"
      }
      {
        include: "#commentLineSlash"
      }
      {
        include: "#commentLineHash"
      }
    ]
  identifier:
    patterns: [
      {
        comment: "identifier - bare bones. In xu * (\"every entity\") can be used as a special identifier as well"
        match: "([A-Za-z_0-9])+|(\\*)"
        name: "variable.identifier.xu"
      }
      {
        comment: "identifer - quoted. Basically a string, but we can't duplicate that"
        begin: "\""
        end: "\""
        name: "variable.identifier.xu"
        patterns: [
          {
            match: "\\\\."
            name: "constant.character.escape.xu"
          }
        ]
      }
    ]
  option:
    comment: "option"
    begin: "\\b(hscale|width|arcgradient|wordwraparcs|watermark|autoscale)\\b"
    beginCaptures:
      "0":
        name: "storage.modifier.xu"
    end: "(,|;)"
    endCaptures:
      "0":
        name: "punctuation.definition.option.end.xu"
    patterns: [
      {
        comment: "equals operator"
        match: "="
        name: "storage.type.xu"
      }
      {
        include: "#number"
      }
      {
        match: "\\b(0|1|on|off|true|false)\\b"
        name: "constant.language.xu"
      }
      {
        include: "#attributevalue"
      }
      {
        include: "#comment"
      }
      {
        include: "#illegalalien"
      }
    ]
  attributestring:
    comment: "strings within an atribute list - duplicated from \"quoted identifiers\" as the matching is the same, but the name is different"
    begin: "\""
    beginCaptures:
      "0":
        name: "punctuation.definition.string.begin.xu"
    end: "\""
    endCaptures:
      "0":
        name: "punctuation.definition.string.end.xu"
    name: "string.quoted.double.xu"
    patterns: [
      {
        match: "\\\\."
        name: "constant.character.escape.xu"
      }
    ]
  attributename:
    match: "\\b(label|idurl|id|url|linecolor|linecolour|textcolor|textcolour|textbgcolor|textbgcolour|arclinecolor|arclinecolour|arctextcolor|arctextcolour|arctextbgcolor|arctextbgcolour|arcskip)\\b"
    name: "keyword.attribute.xu"
  attributevalue:
    patterns: [
      {
        include: "#attributestring"
      }
      {
        match: "([A-Za-z_0-9])+"
        name: "string.identifier.as.attribute.value.xu"
      }
    ]
  attributelist:
    begin: "\\["
    beginCaptures:
      "0":
        name: "punctuation.definition.attributelist.begin.xu"
    end: "\\]"
    endCaptures:
      "0":
        name: "punctuation.definition.attributelist.end.xu"
    name: "keyword.operator.xu"
    patterns: [
      {
        include: "#attributename"
      }
      {
        comment: "equals operator"
        match: "="
        name: "storage.type.xu"
      }
      {
        include: "#attributevalue"
      }
      {
        match: ","
        name: "punctuation.separator.attributelist.xu"
      }
      {
        include: "#comment"
      }
      {
        include: "#illegalalien"
      }
    ]
  arctype:
    patterns: [
      {
        comment: "arc types - symbols"
        match: "(\\|\\|\\||\\.\\.\\.|---|--|<->|==|<<=>>|<=>|\\.\\.|<<>>|::|<:>|->|=>>|=>|>>|:>|<-|<<=|<=|<<|<:|x-|-x|X-|-X)"
        name: "storage.type.xu"
      }
      {
        comment: "arc types - words"
        match: "\\b(note|box|abox|rbox|alt|else|opt|break|par|seq|strict|neg|critical|ignore|consider|assert|loop|ref|exc)\\b"
        name: "storage.type.xu"
      }
    ]
  inlineblock:
    begin: "\\{"
    beginCaptures:
      "0":
        name: "punctuation.definition.inlineblock.start.xu"
    end: "(\\})(;)"
    endCaptures:
      "1":
        name: "punctuation.definition.inlineblock.end.xu"
      "2":
        name: "punctuation.separator.inlineblock.end.xu"
    patterns: [
      {
        include: "#identifier"
      }
      {
        include: "#attributelist"
      }
      {
        include: "#arctype"
      }
      {
        include: "#inlineblock"
      }
      {
        include: "#punctuation"
      }
      {
        include: "#comment"
      }
      {
        include: "#illegalalien"
      }
    ]
